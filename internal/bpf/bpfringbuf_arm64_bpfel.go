// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// LoadBpfRingbuf returns the embedded CollectionSpec for BpfRingbuf.
func LoadBpfRingbuf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfRingbufBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load BpfRingbuf: %w", err)
	}

	return spec, err
}

// LoadBpfRingbufObjects loads BpfRingbuf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*BpfRingbufObjects
//	*BpfRingbufPrograms
//	*BpfRingbufMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadBpfRingbufObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadBpfRingbuf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// BpfRingbufSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfRingbufSpecs struct {
	BpfRingbufProgramSpecs
	BpfRingbufMapSpecs
	BpfRingbufVariableSpecs
}

// BpfRingbufProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfRingbufProgramSpecs struct {
	KprobeFileOpen      *ebpf.ProgramSpec `ebpf:"kprobe_file_open"`
	TracePqsendquery    *ebpf.ProgramSpec `ebpf:"trace_pqsendquery"`
	TracePqsendqueryRet *ebpf.ProgramSpec `ebpf:"trace_pqsendquery_ret"`
}

// BpfRingbufMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfRingbufMapSpecs struct {
	ActivePgQueries *ebpf.MapSpec `ebpf:"active_pg_queries"`
	Events          *ebpf.MapSpec `ebpf:"events"`
}

// BpfRingbufVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfRingbufVariableSpecs struct {
	UnusedLibrary *ebpf.VariableSpec `ebpf:"unused_library"`
	UnusedQuery   *ebpf.VariableSpec `ebpf:"unused_query"`
}

// BpfRingbufObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadBpfRingbufObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfRingbufObjects struct {
	BpfRingbufPrograms
	BpfRingbufMaps
	BpfRingbufVariables
}

func (o *BpfRingbufObjects) Close() error {
	return _BpfRingbufClose(
		&o.BpfRingbufPrograms,
		&o.BpfRingbufMaps,
	)
}

// BpfRingbufMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadBpfRingbufObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfRingbufMaps struct {
	ActivePgQueries *ebpf.Map `ebpf:"active_pg_queries"`
	Events          *ebpf.Map `ebpf:"events"`
}

func (m *BpfRingbufMaps) Close() error {
	return _BpfRingbufClose(
		m.ActivePgQueries,
		m.Events,
	)
}

// BpfRingbufVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadBpfRingbufObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfRingbufVariables struct {
	UnusedLibrary *ebpf.Variable `ebpf:"unused_library"`
	UnusedQuery   *ebpf.Variable `ebpf:"unused_query"`
}

// BpfRingbufPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadBpfRingbufObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfRingbufPrograms struct {
	KprobeFileOpen      *ebpf.Program `ebpf:"kprobe_file_open"`
	TracePqsendquery    *ebpf.Program `ebpf:"trace_pqsendquery"`
	TracePqsendqueryRet *ebpf.Program `ebpf:"trace_pqsendquery_ret"`
}

func (p *BpfRingbufPrograms) Close() error {
	return _BpfRingbufClose(
		p.KprobeFileOpen,
		p.TracePqsendquery,
		p.TracePqsendqueryRet,
	)
}

func _BpfRingbufClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpfringbuf_arm64_bpfel.o
var _BpfRingbufBytes []byte
