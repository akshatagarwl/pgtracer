// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// LoadBpfPerfbuf returns the embedded CollectionSpec for BpfPerfbuf.
func LoadBpfPerfbuf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfPerfbufBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load BpfPerfbuf: %w", err)
	}

	return spec, err
}

// LoadBpfPerfbufObjects loads BpfPerfbuf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*BpfPerfbufObjects
//	*BpfPerfbufPrograms
//	*BpfPerfbufMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadBpfPerfbufObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadBpfPerfbuf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// BpfPerfbufSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfPerfbufSpecs struct {
	BpfPerfbufProgramSpecs
	BpfPerfbufMapSpecs
	BpfPerfbufVariableSpecs
}

// BpfPerfbufProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfPerfbufProgramSpecs struct {
	KprobeFileOpen      *ebpf.ProgramSpec `ebpf:"kprobe_file_open"`
	TracePqsendquery    *ebpf.ProgramSpec `ebpf:"trace_pqsendquery"`
	TracePqsendqueryRet *ebpf.ProgramSpec `ebpf:"trace_pqsendquery_ret"`
}

// BpfPerfbufMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfPerfbufMapSpecs struct {
	ActivePgQueries *ebpf.MapSpec `ebpf:"active_pg_queries"`
	Events          *ebpf.MapSpec `ebpf:"events"`
	LibraryHeap     *ebpf.MapSpec `ebpf:"library_heap"`
	QueryHeap       *ebpf.MapSpec `ebpf:"query_heap"`
}

// BpfPerfbufVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfPerfbufVariableSpecs struct {
	UnusedLibrary *ebpf.VariableSpec `ebpf:"unused_library"`
	UnusedQuery   *ebpf.VariableSpec `ebpf:"unused_query"`
}

// BpfPerfbufObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadBpfPerfbufObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfPerfbufObjects struct {
	BpfPerfbufPrograms
	BpfPerfbufMaps
	BpfPerfbufVariables
}

func (o *BpfPerfbufObjects) Close() error {
	return _BpfPerfbufClose(
		&o.BpfPerfbufPrograms,
		&o.BpfPerfbufMaps,
	)
}

// BpfPerfbufMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadBpfPerfbufObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfPerfbufMaps struct {
	ActivePgQueries *ebpf.Map `ebpf:"active_pg_queries"`
	Events          *ebpf.Map `ebpf:"events"`
	LibraryHeap     *ebpf.Map `ebpf:"library_heap"`
	QueryHeap       *ebpf.Map `ebpf:"query_heap"`
}

func (m *BpfPerfbufMaps) Close() error {
	return _BpfPerfbufClose(
		m.ActivePgQueries,
		m.Events,
		m.LibraryHeap,
		m.QueryHeap,
	)
}

// BpfPerfbufVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadBpfPerfbufObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfPerfbufVariables struct {
	UnusedLibrary *ebpf.Variable `ebpf:"unused_library"`
	UnusedQuery   *ebpf.Variable `ebpf:"unused_query"`
}

// BpfPerfbufPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadBpfPerfbufObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfPerfbufPrograms struct {
	KprobeFileOpen      *ebpf.Program `ebpf:"kprobe_file_open"`
	TracePqsendquery    *ebpf.Program `ebpf:"trace_pqsendquery"`
	TracePqsendqueryRet *ebpf.Program `ebpf:"trace_pqsendquery_ret"`
}

func (p *BpfPerfbufPrograms) Close() error {
	return _BpfPerfbufClose(
		p.KprobeFileOpen,
		p.TracePqsendquery,
		p.TracePqsendqueryRet,
	)
}

func _BpfPerfbufClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpfperfbuf_x86_bpfel.o
var _BpfPerfbufBytes []byte
