// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type BpfEventType uint32

const (
	BpfEventTypeEVENT_TYPE_LIBRARY_LOAD      BpfEventType = 1
	BpfEventTypeEVENT_TYPE_POSTGRES_QUERY    BpfEventType = 2
	BpfEventTypeEVENT_TYPE_GO_POSTGRES_QUERY BpfEventType = 3
	BpfEventTypeEVENT_TYPE_EXEC              BpfEventType = 4
)

type BpfExecEvent struct {
	_      structs.HostLayout
	Header BpfTraceEventHeader
}

type BpfGoPostgresQueryEvent struct {
	_        structs.HostLayout
	Header   BpfTraceEventHeader
	ConnPtr  uint64
	Query    [512]uint8
	QueryLen uint32
	_        [4]byte
}

type BpfGoQueryArgs struct {
	_        structs.HostLayout
	ConnPtr  uint64
	QueryPtr uint64
	QueryLen uint32
	_        [4]byte
}

type BpfLibraryLoadEvent struct {
	_           structs.HostLayout
	Header      BpfTraceEventHeader
	LibraryName [64]uint8
	LibType     uint32
	_           [4]byte
}

type BpfPgQueryArgs struct {
	_     structs.HostLayout
	Conn  uint64
	Query uint64
}

type BpfPostgresQueryEvent struct {
	_       structs.HostLayout
	Header  BpfTraceEventHeader
	ConnPtr uint64
	Query   [512]uint8
}

type BpfTraceEventHeader struct {
	_         structs.HostLayout
	Type      BpfEventType
	_         [4]byte
	Timestamp uint64
	Pid       uint32
	Tgid      uint32
	Comm      [16]uint8
}

// LoadBpf returns the embedded CollectionSpec for Bpf.
func LoadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Bpf: %w", err)
	}

	return spec, err
}

// LoadBpfObjects loads Bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*BpfObjects
//	*BpfPrograms
//	*BpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// BpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfSpecs struct {
	BpfProgramSpecs
	BpfMapSpecs
	BpfVariableSpecs
}

// BpfProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfProgramSpecs struct {
	KprobeFileOpen      *ebpf.ProgramSpec `ebpf:"kprobe_file_open"`
	TraceExecveExit     *ebpf.ProgramSpec `ebpf:"trace_execve_exit"`
	TraceGoPqQuery      *ebpf.ProgramSpec `ebpf:"trace_go_pq_query"`
	TraceGoPqQueryRet   *ebpf.ProgramSpec `ebpf:"trace_go_pq_query_ret"`
	TracePqsendquery    *ebpf.ProgramSpec `ebpf:"trace_pqsendquery"`
	TracePqsendqueryRet *ebpf.ProgramSpec `ebpf:"trace_pqsendquery_ret"`
}

// BpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfMapSpecs struct {
	ActiveGoQueries *ebpf.MapSpec `ebpf:"active_go_queries"`
	ActivePgQueries *ebpf.MapSpec `ebpf:"active_pg_queries"`
	Events          *ebpf.MapSpec `ebpf:"events"`
	ExecHeap        *ebpf.MapSpec `ebpf:"exec_heap"`
	GoQueryHeap     *ebpf.MapSpec `ebpf:"go_query_heap"`
	LibraryHeap     *ebpf.MapSpec `ebpf:"library_heap"`
	QueryHeap       *ebpf.MapSpec `ebpf:"query_heap"`
}

// BpfVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfVariableSpecs struct {
	UnusedGoQuery *ebpf.VariableSpec `ebpf:"unused_go_query"`
	UnusedLibrary *ebpf.VariableSpec `ebpf:"unused_library"`
	UnusedQuery   *ebpf.VariableSpec `ebpf:"unused_query"`
}

// BpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfObjects struct {
	BpfPrograms
	BpfMaps
	BpfVariables
}

func (o *BpfObjects) Close() error {
	return _BpfClose(
		&o.BpfPrograms,
		&o.BpfMaps,
	)
}

// BpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfMaps struct {
	ActiveGoQueries *ebpf.Map `ebpf:"active_go_queries"`
	ActivePgQueries *ebpf.Map `ebpf:"active_pg_queries"`
	Events          *ebpf.Map `ebpf:"events"`
	ExecHeap        *ebpf.Map `ebpf:"exec_heap"`
	GoQueryHeap     *ebpf.Map `ebpf:"go_query_heap"`
	LibraryHeap     *ebpf.Map `ebpf:"library_heap"`
	QueryHeap       *ebpf.Map `ebpf:"query_heap"`
}

func (m *BpfMaps) Close() error {
	return _BpfClose(
		m.ActiveGoQueries,
		m.ActivePgQueries,
		m.Events,
		m.ExecHeap,
		m.GoQueryHeap,
		m.LibraryHeap,
		m.QueryHeap,
	)
}

// BpfVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfVariables struct {
	UnusedGoQuery *ebpf.Variable `ebpf:"unused_go_query"`
	UnusedLibrary *ebpf.Variable `ebpf:"unused_library"`
	UnusedQuery   *ebpf.Variable `ebpf:"unused_query"`
}

// BpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfPrograms struct {
	KprobeFileOpen      *ebpf.Program `ebpf:"kprobe_file_open"`
	TraceExecveExit     *ebpf.Program `ebpf:"trace_execve_exit"`
	TraceGoPqQuery      *ebpf.Program `ebpf:"trace_go_pq_query"`
	TraceGoPqQueryRet   *ebpf.Program `ebpf:"trace_go_pq_query_ret"`
	TracePqsendquery    *ebpf.Program `ebpf:"trace_pqsendquery"`
	TracePqsendqueryRet *ebpf.Program `ebpf:"trace_pqsendquery_ret"`
}

func (p *BpfPrograms) Close() error {
	return _BpfClose(
		p.KprobeFileOpen,
		p.TraceExecveExit,
		p.TraceGoPqQuery,
		p.TraceGoPqQueryRet,
		p.TracePqsendquery,
		p.TracePqsendqueryRet,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpf_x86_bpfel.o
var _BpfBytes []byte
